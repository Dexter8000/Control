"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSelectSchema = exports.createInsertSchema = exports.jsonSchema = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
const sqlite_core_1 = require("drizzle-orm/sqlite-core");
const utils_1 = require("drizzle-orm/utils");
const zod_1 = require("zod");
const literalSchema = zod_1.z.union([zod_1.z.string(), zod_1.z.number(), zod_1.z.boolean(), zod_1.z.null()]);
exports.jsonSchema = zod_1.z.lazy(() => zod_1.z.union([literalSchema, zod_1.z.array(exports.jsonSchema), zod_1.z.record(exports.jsonSchema)]));
function createInsertSchema(table, 
/**
 * @param refine Refine schema fields
 */
refine) {
    const columns = (0, utils_1.getTableColumns)(table);
    const columnEntries = Object.entries(columns);
    let schemaEntries = Object.fromEntries(columnEntries.map(([name, column]) => {
        return [name, mapColumnToSchema(column)];
    }));
    if (refine) {
        schemaEntries = Object.assign(schemaEntries, Object.fromEntries(Object.entries(refine).map(([name, refineColumn]) => {
            return [
                name,
                typeof refineColumn === 'function'
                    ? refineColumn(schemaEntries)
                    : refineColumn,
            ];
        })));
    }
    columnEntries.forEach(([name, column]) => {
        if (!column.notNull) {
            schemaEntries[name] = schemaEntries[name].nullable().optional();
        }
        else if (column.hasDefault) {
            schemaEntries[name] = schemaEntries[name].optional();
        }
    });
    return zod_1.z.object(schemaEntries);
}
exports.createInsertSchema = createInsertSchema;
function createSelectSchema(table, 
/**
 * @param refine Refine schema fields
 */
refine) {
    const columns = (0, utils_1.getTableColumns)(table);
    const columnEntries = Object.entries(columns);
    let schemaEntries = Object.fromEntries(columnEntries.map(([name, column]) => {
        return [name, mapColumnToSchema(column)];
    }));
    if (refine) {
        schemaEntries = Object.assign(schemaEntries, Object.fromEntries(Object.entries(refine).map(([name, refineColumn]) => {
            return [
                name,
                typeof refineColumn === 'function'
                    ? refineColumn(schemaEntries)
                    : refineColumn,
            ];
        })));
    }
    columnEntries.forEach(([name, column]) => {
        if (!column.notNull) {
            schemaEntries[name] = schemaEntries[name].nullable();
        }
    });
    return zod_1.z.object(schemaEntries);
}
exports.createSelectSchema = createSelectSchema;
function mapColumnToSchema(column) {
    let type;
    if ('enum' in column) {
        const _enum = column.enum;
        if (_enum.length) {
            type = zod_1.z.enum(_enum);
        }
        else {
            type = zod_1.z.string();
        }
    }
    if (!type) {
        if (column instanceof pg_core_1.PgCustomColumn || column instanceof sqlite_core_1.SQLiteCustomColumn) {
            type = zod_1.z.any();
        }
        else if (column instanceof pg_core_1.PgJson || column instanceof pg_core_1.PgJsonb || column instanceof sqlite_core_1.SQLiteBlobJson) {
            type = exports.jsonSchema;
        }
        else if (column instanceof pg_core_1.PgArray) {
            type = zod_1.z.array(mapColumnToSchema(column.baseColumn));
        }
        else if (column instanceof pg_core_1.PgBigInt53 || column instanceof pg_core_1.PgInteger || column instanceof pg_core_1.PgSmallInt
            || column instanceof pg_core_1.PgSerial || column instanceof pg_core_1.PgBigSerial53 || column instanceof pg_core_1.PgSmallSerial
            || column instanceof pg_core_1.PgDoublePrecision || column instanceof pg_core_1.PgReal || column instanceof sqlite_core_1.SQLiteInteger
            || column instanceof sqlite_core_1.SQLiteReal) {
            type = zod_1.z.number();
        }
        else if (column instanceof pg_core_1.PgBigInt64 || column instanceof pg_core_1.PgBigSerial64) {
            type = zod_1.z.bigint();
        }
        else if (column instanceof pg_core_1.PgBoolean) {
            type = zod_1.z.boolean();
        }
        else if (column instanceof pg_core_1.PgDate || column instanceof pg_core_1.PgTimestamp || column instanceof sqlite_core_1.SQLiteTimestamp) {
            type = zod_1.z.date();
        }
        else if (column instanceof pg_core_1.PgEnumColumn) {
            type = zod_1.z.enum(column.enum.enumValues);
        }
        else if (column instanceof pg_core_1.PgInterval || column instanceof pg_core_1.PgNumeric || column instanceof pg_core_1.PgChar
            || column instanceof pg_core_1.PgCidr || column instanceof pg_core_1.PgInet || column instanceof pg_core_1.PgMacaddr
            || column instanceof pg_core_1.PgMacaddr8
            || column instanceof pg_core_1.PgText || column instanceof pg_core_1.PgTime || column instanceof pg_core_1.PgVarchar
            || column instanceof sqlite_core_1.SQLiteNumeric || column instanceof sqlite_core_1.SQLiteText) {
            type = zod_1.z.string();
        }
        else if (column instanceof pg_core_1.PgUUID) {
            type = zod_1.z.string().uuid();
        }
    }
    if (!type) {
        type = zod_1.z.any();
    }
    return type;
}
//# sourceMappingURL=index.js.map